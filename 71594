#include <iostream>
#define _USE_MATH_DEFINES
#include <math.h>

using namespace std;

class Point
{
private:
	double x;
	double y;
public:
	Point(double x = 0, double y = 0)
	{
		this->x = x;
		this->y = y;
	}
	double getX()const
	{
		return this->x;
	}
	double getY()const
	{
		return this->y;
	}
	bool operator == (const Point & other)
	{
		if ((this->getX() == other.getX()) && (this->getY() == other.getY()))
			return true;
		else
			return false;
	}
};

class Figure
{
public:
	virtual double area() = 0;
	virtual double perimetar() = 0;
	virtual Point& center() = 0;
};

class Triangle : public Figure
{
private:
	Point p1, p2, p3;
	void cpy(const Triangle & other)
	{
		this->p1 = other.p1;
		this->p2 = other.p2;
		this->p3 = other.p3;
	}
public:
	Triangle(Point p1, Point p2, Point p3)
	{
		this->p1 = p1;
		this->p2 = p2;
		this->p3 = p3;
	}
	Triangle(const Triangle& other)
	{
		cpy(other);
	}
	Triangle & operator = (const Triangle & other)
	{
		if (this != &other)
		{
			cpy(other);
		}
		return *this;
	}
	double getSideA()
	{
		double a = sqrt(pow(p2.getX() - p3.getX(), 2) + pow(p2.getY() - p3.getY(), 2));
		return a;
	}
	double getSideB()
	{
		double b = sqrt(pow(p1.getX() - p3.getX(), 2) + pow(p1.getY() - p3.getY(), 2));
		return b;
	}
	double getSideC()
	{
		double c = sqrt(pow(p1.getX() - p2.getX(), 2) + pow(p1.getY() - p2.getY(), 2));
		return c;
	}
	double area()
	{
		double p = perimetar() / 2;
		double area = sqrt(p*(p - getSideA())*(p - getSideB())*(p - getSideC()));
		return area;
	}
	double perimetar()
	{
		double a = getSideA();
		double b = getSideB();
		double c = getSideC();
		double perimetar = a + b + c;
		return perimetar;
	}
	Point& center()
	{
		double x0 = (p1.getX() + p2.getX() + p3.getX()) / 3;
		double y0 = (p1.getY() + p2.getY() + p3.getY()) / 3;
		return Point(x0, y0);
	}
	bool operator == (const Triangle & other)
	{
		if ((this->p1 == other.p1) && (this->p2 == other.p2) && (this->p3 == other.p3))
			return true;
		else
			return false;
	}
};

class Rectangle : public Figure
{
private:
	Point p1, p2, p3, p4;
	void cpy(const Rectangle & other)
	{
		this->p1 = other.p1;
		this->p2 = other.p2;
		this->p3 = other.p3;
		this->p4 = other.p4;
	}
public:
	Rectangle(Point p1, Point p2, Point p3, Point p4)
	{
		this->p1 = p1;
		this->p2 = p2;
		this->p3 = p3;
		this->p4 = p4;
	}
	Rectangle(const Rectangle& other)
	{
		cpy(other);
	}
	Rectangle & operator = (const Rectangle & other)
	{
		if (this != &other)
		{
			cpy(other);
		}
		return *this;
	}
	double getSideA()
	{
		double a = sqrt(pow(p1.getX() - p2.getX(), 2) + pow(p1.getY() - p2.getY(), 2));
		return a;
	}
	double getSideB()
	{
		double b = sqrt(pow(p1.getX() - p4.getX(), 2) + pow(p1.getY() - p4.getY(), 2));
		return b;
	}
	double area()
	{
		double area = getSideA()*getSideB();
		return area;
	}
	double perimetar()
	{
		double perimetar = 2 * (getSideA() + getSideB());
		return perimetar;
	}
	Point& center()
	{
		double x0 = (abs(p1.getX() - p2.getX())) / 2;
		double y0 = (abs(p1.getY() - p2.getY())) / 2;
		return Point(x0, y0);
	}
	bool operator == (const Rectangle & other)
	{
		if ((this->p1 == other.p1) && (this->p2 == other.p2) && (this->p3 == other.p3) && (this->p4 == other.p4))
			return true;
		else
			return false;
	}
};

class Circle : public Figure
{
private:
	Point p1;
	double r;
	void cpy(const Circle & other)
	{
		this->p1 = other.p1;
		this->r = other.r;
	}
public:
	Circle(Point p1, double r)
	{
		this->p1 = p1;
		this->r = r;
	}
	Circle(const Circle& other)
	{
		cpy(other);
	}
	Circle & operator = (const Circle & other)
	{
		if (this != &other)
		{
			cpy(other);
		}
		return *this;
	}
	double area()
	{
		double area = pow(r,2) * M_PI;
		return area;
	}
	double perimetar()
	{
		double perimetar = (2 * r) * M_PI;
		return perimetar;
	}
	Point& center()
	{
		return this->p1;
	}
	bool operator == (const Circle & other)
	{
		if ((this->p1 == other.p1) && (this->r == other.r))
			return true;
		else
			return false;
	}
};

int main()
{

	system("pause");
	return 0;
}
